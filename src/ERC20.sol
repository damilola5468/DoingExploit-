
pragma solidity 0.8.0;

// import "@pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol";
// import "@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol";
// import "@pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol";

// import "contracts/library/PausableUpgradeable.sol";
// import "contracts/library/WhitelistUpgradeable.sol";

// support BNB and multi tokens on a single contract
contract HunnyPlayV2 is PausableUpgradeable, WhitelistUpgradeable {
    using SafeMath for uint256;
    using SafeBEP20 for IBEP20;

    event Deposited(address indexed token, address indexed account, uint256 indexed amount);
    event Withdrawn(address indexed token, address indexed account, uint256 indexed amount);

    function initialize() external initializer {
        __PausableUpgradeable_init();
        __WhitelistUpgradeable_init();
    }

    // receive BNB from anywhere
    receive() external payable {}

    function deposit(address token, uint256 amount) external payable notPaused {
        if (token == address(0)) {
            // BNB case
            emit Deposited(address(0), msg.sender, msg.value);
        } else {
            // token case
            IBEP20(token).safeTransferFrom(msg.sender, address(this), amount);
            emit Deposited(token, msg.sender, amount);
        }
    }

    function withdraw(
        address token,
        address reception,
        uint256 amount
    ) public onlyWhitelisted {
        if (token == address(0)) {
            // BNB case
            payable(reception).transfer(amount);
            emit Withdrawn(address(0), reception, amount);
        } else {
            IBEP20(token).safeTransfer(reception, amount);
            emit Withdrawn(token, reception, amount);
        }
    }

    function withdrawMany(
        address[] memory tokens,
        address[] memory receptions,
        uint256[] memory amounts
    ) public {
        // careful with gas paid
        for (uint256 i = 0; i < receptions.length; i++) {
            withdraw(tokens[i], receptions[i], amounts[i]);
        }
    }

    function recoverBNB(address reception, uint256 amount) public onlyOwner {
        payable(reception
